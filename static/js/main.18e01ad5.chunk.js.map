{"version":3,"sources":["game/Squares.js","game/Game.js","App.js","serviceWorker.js","index.js"],"names":["connect","state","dispatch","setXorO","index","type","reset","props","react_default","a","createElement","count","win","className","square","map","el","i","onClick","key","squares","Array","fill","store","createStore","arguments","length","undefined","action","newState","Object","objectSpread","arr","forEach","_ref","toConsumableArray","b","c","processingOfGold","subscribe","console","log","getState","App","es","game_Squares","Game","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAuBeA,cACX,SAAAC,GAAK,MAAK,CACNA,UAEJ,SAAAC,GAAQ,MAAK,CACVC,QAAS,SAACC,GACNF,EAAS,CAACG,KAAM,OAAQD,WAE5BE,MAAO,WACNJ,EAAS,CAACG,KAAM,aATTL,CApBC,SAACO,GACX,OACIC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,4BAAoBH,EAAMN,MAAMU,MAAhC,OAA2CJ,EAAMN,MAAMU,MAAQ,EAAI,IAAM,KACxEJ,EAAMN,MAAMW,IAAMJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OAAf,QAA2BN,EAAMN,MAAMU,MAAQ,EAAI,IAAM,KAAa,GACzFH,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACZN,EAAMN,MAAMa,OAAOC,IAAI,SAACC,EAAIC,GAC1B,OACQ,OAAPD,IAAmC,IAApBT,EAAMN,MAAMW,IACrBJ,EAAAC,EAAAC,cAAA,OAAKQ,QAAS,kBAAMX,EAAMJ,QAAQc,IAAIJ,UAAU,SAASM,IAAKF,GAAID,GAClER,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SAASM,IAAKF,GAAID,KAI3CR,EAAAC,EAAAC,cAAA,UAAQQ,QAAS,kBAAMX,EAAMD,UAA7B,aCLNc,EAAU,CAAEN,OAAQO,MAAM,GAAGC,KAAK,MAAOX,MAAO,EAAGC,KAAK,GAmBxDW,EAAQC,YAjBO,WAA6B,IAA5BvB,EAA4BwB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApBL,EAASQ,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC9C,GAAoB,SAAhBC,EAAOvB,KAAiB,CACxB,IAAIwB,EAAQC,OAAAC,EAAA,EAAAD,CAAA,GAAO7B,GAInB,OAHA4B,EAASf,OAAOc,EAAOxB,OAASyB,EAASlB,MAAQ,EAAI,IAAM,IAC3DkB,EAASlB,QACTkB,EAASjB,IAcjB,SAA0BoB,GACtB,IACIpB,EAAM,EAOV,MARiB,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAE1DqB,QAAQ,SAAAjB,GAAM,IAAAkB,EAAAJ,OAAAK,EAAA,EAAAL,CACDd,GAAfP,EADgByB,EAAA,GACbE,EADaF,EAAA,GACVG,EADUH,EAAA,GAEN,OAAXF,EAAIvB,IAAeuB,EAAIvB,KAAOuB,EAAII,IAAMJ,EAAII,KAAOJ,EAAIK,IACzDzB,MAGGA,EAAM,EAvBM0B,CAAiBT,EAASf,QAClCe,EAEX,GAAoB,UAAhBD,EAAOvB,KAAkB,CACzB,IAAIwB,EAAQC,OAAAC,EAAA,EAAAD,CAAA,GAAO7B,GAInB,OAHA4B,EAASf,OAASO,MAAM,GAAGC,KAAK,MAChCO,EAASlB,MAAQ,EACjBkB,EAASjB,KAAM,EACRiB,EAEX,OAAO5B,IAgBXsB,EAAMgB,UAAU,WAEZC,QAAQC,IAAI,UAAWlB,EAAMmB,cAGlBC,MA7CH,WACR,OACInC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAUrB,MAAOA,GACbf,EAAAC,EAAAC,cAACmC,EAAD,QCIGF,mLANX,OACEnC,EAAAC,EAAAC,cAACoC,EAAD,aAHYC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.18e01ad5.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\n\r\nconst Squares = (props) => {\r\n      return (\r\n          <div>\r\n          <span>Step number: {props.state.count} -> {props.state.count % 2 ? 'O' : 'X'}</span>\r\n          {props.state.win ? <div className=\"win\">wins {props.state.count % 2 ? 'X' : 'O'}</div> : ''}\r\n          <div className=\"Game\">\r\n            {props.state.square.map((el, i) => {\r\n               return (\r\n                el === null && props.state.win === false\r\n                    ? <div onClick={() => props.setXorO(i)} className=\"Square\" key={i}>{el}</div>\r\n                    : <div className=\"Square\" key={i}>{el}</div>\r\n                    )}\r\n            )}\r\n            \r\n            <button onClick={() => props.reset()}>reset</button>\r\n          </div>\r\n          </div>\r\n      )\r\n}\r\n\r\nexport default connect(\r\n    state => ({\r\n        state\r\n    }),\r\n    dispatch => ({\r\n       setXorO: (index) => {\r\n           dispatch({type: 'TORN', index})\r\n       },\r\n       reset: () => {\r\n        dispatch({type: 'RESET'})\r\n       }\r\n    })\r\n)(Squares)\r\n\r\n","import React from \"react\"\r\nimport { createStore } from 'redux'\r\nimport Squares from \"./Squares\"\r\nimport { Provider } from \"react-redux\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <Provider store={store}>\r\n            <Squares />\r\n        </Provider>\r\n    )\r\n}\r\nconst squares = { square: Array(9).fill(null), count: 0, win: false};\r\n\r\nconst reducerStore = (state = squares, action) => {\r\n    if (action.type === 'TORN') {\r\n        let newState = {...state};\r\n        newState.square[action.index] = newState.count % 2 ? 'O' : 'X' ;\r\n        newState.count++;\r\n        newState.win = processingOfGold(newState.square);\r\n        return newState;\r\n    }\r\n    if (action.type === 'RESET') {\r\n        let newState = {...state};\r\n        newState.square = Array(9).fill(null);\r\n        newState.count = 1;\r\n        newState.win = false;\r\n        return newState;\r\n    }\r\n    return state;\r\n}\r\nconst store = createStore(reducerStore);\r\n\r\nfunction processingOfGold(arr) {\r\n    const variants = ['012', '036', '048', '147', '246', '258', '345', '678', ];\r\n    let win = 0;\r\n    variants.forEach(el => {\r\n      let [a, b, c] = [...el]\r\n      if (arr[a] !== null && arr[a] === arr[b] && arr[b] === arr[c]) {  \r\n        win++;\r\n      }\r\n    });\r\n    return win > 0 ? true : false;\r\n  }\r\n\r\nstore.subscribe(() => {\r\n    \r\n    console.log('state: ', store.getState())\r\n})\r\n\r\nexport default App","import React, { Component } from 'react'\nimport './App.css';\nimport Game from \"./game/Game\"\n\nclass App extends Component {\n  render() {\n    return (\n      <Game />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}